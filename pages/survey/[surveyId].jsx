import { useQuery } from "@apollo/client";
import Head from "next/head";
import { useRouter } from "next/router";

import { GET_QUESTIONS } from "queries";
import QuestionView from "components/QuestionView";

import { useToggle } from "hooks";
import CreateQuestion from "../../components/CreateQuestion";

import { useState, useEffect, useMemo } from "react";

import { useUpdateOrder } from "hooks";

import NextLink from "next/link";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { groupBy } from "lodash-es";
import { VStack, Link, Button, HStack } from "@chakra-ui/react";

const reorder = (list, startIndex, endIndex) => {
  const result = Array.from(list);
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);

  return result;
};

const SurveyPage = () => {
  const {
    query: { surveyId },
  } = useRouter();

  const { data } = useQuery(GET_QUESTIONS, {
    skip: !Boolean(surveyId),
    variables: { surveyId },
  });

  const questions = useMemo(() => data?.Survey?.Questions || [], [data]);
  const order = useMemo(() => data?.Survey?.order || [], [data]);

  const [orderedQuestions, setOrderedQuestions] = useState([]);

  useEffect(() => {
    const questionsByOrder = groupBy(questions, "id");
    const questionsInOrder = order
      .map((id) => questionsByOrder[id]?.[0])
      .filter(Boolean);
    setOrderedQuestions(questionsInOrder);
  }, [questions, order]);

  const [showCreate, toggleCreateForm] = useToggle();

  const [updateOrder] = useUpdateOrder(surveyId);

  const onDragEnd = (result) => {
    if (!result.destination) {
      return;
    }

    const items = reorder(
      orderedQuestions,
      result.source.index,
      result.destination.index
    );

    updateOrder(items.map(({ id }) => id));
    setOrderedQuestions(items);
  };

  const onCreateComplete = (id) => {
    updateOrder([...order, id]);
    toggleCreateForm();
  };

  return (
    <VStack
      gap="50px"
      padding={["2rem", "3rem"]}
      alignItems="center"
      alignContent="center"
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HStack
        justifyContent="space-between"
        width="100%"
        gap="20px"
        flexWrap="wrap"
      >
        <NextLink href="/" passHref>
          <Link fontSize="2rem" fontWeight="bold">
            Home
          </Link>
        </NextLink>

        <Button onClick={toggleCreateForm}>Create Question</Button>
      </HStack>

      {showCreate && (
        <CreateQuestion
          closeForm={onCreateComplete}
          cancel={toggleCreateForm}
        />
      )}

      <VStack as="main" gap="50px" alignItems="start" width="100%">
        <DragDropContext onDragEnd={onDragEnd}>
          <Droppable droppableId="droppable">
            {(provided) => (
              <div
                {...provided.droppableProps}
                ref={provided.innerRef}
                style={{ width: "100%" }}
              >
                <VStack gap="50px" alignItems="start" width="100%">
                  {orderedQuestions.map((item, index) => (
                    <Draggable
                      key={item.id}
                      draggableId={item.id}
                      index={index}
                    >
                      {(providedSecond) => (
                        <div
                          ref={providedSecond.innerRef}
                          {...providedSecond.draggableProps}
                          {...providedSecond.dragHandleProps}
                        >
                          <QuestionView {...item} index={index} />
                        </div>
                      )}
                    </Draggable>
                  ))}
                </VStack>
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </VStack>
    </VStack>
  );
};

export default SurveyPage;
